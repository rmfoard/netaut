29Apr2018

To provision for generating netaut/hellosnap:

- (install git, vim)

- git config --global push.default simple

- sudo apt install libpng-dev

- download graphviz...gz
-   gunzip ...gz
-   tar xvf ...tar
-   cd graphviz...
-   ./configure
-   make
-   sudo make install

- clone SNAP from Github into ~/snap
-   cd snap
-   make all
----(following Ubuntu upgrade -> 18)
-   re-clone snap from github
-   apply source patch to .../glib-core/bd.cpp, as documented in:
    https://github.com/jamen/snap/commit/7cfd9f09d51137f0b86967fcad43ce2ce95317a0
-   (then re-make)
----

- sudo apt install gnuplot

- (for graph-tool)
-   add to /etc/apt/source-list
-   deb http://downloads.skewed.de/apt/xenial xenial universe
-   deb-src http://downloads.skewed.de/apt/xenial xenial universe
-   sudo apt install graph-tool

- install cmake >= v3.9
-   usually can simply sudo apt install cmake; if not:
-   (uninstall < v3.9 if necessary)
-   from current source .tar: gunzip, tar xvf
-   make, sudo make install

- install jsoncpp
-   clone from github into ~/jsoncpp
-   cd jsoncpp
-   mkdir build && cd build
-   generate lib with:
    cmake -DCMAKE_BUILD_TYPE=release -DBUILD_STATIC_LIBS=ON -DBUILD_SHARED_LIBS=OFF -DARCHIVE_INSTALL_DIR=. -G "Unix Makefiles" ..
    make
    sudo make install
-   use #include <json/json.h>
-   the install step places a copy of libjsoncpp.a in /usr/lib/local, which is typically in ld's default search path
        (if not, edit ~/etc/ld.so.conf, which refs include's in /etc/ld.so.conf.d/, then refresh cache w/ldconfig)
-   generate as in `g++ -std=c++11 myapp.cpp -ljsoncpp`
----(following Ubuntu upgrade -> 18)
-   Edit ~/jsoncpp/CMakelists.txt to include the lines:
    # Added by RMF after upgrade to Ubuntu 18
    SET(CMAKE_POSITION_INDEPENDENT_CODE ON)
    # End of addition
----

- do not forget -std=c++11

- set up virtualbox shared folders
    - vbox Devices menu: mount Guest Additions, autoruns in VM
    - if no autorun, run autorun.sh in (uoob guest) /media/richard/VBox...
    - restart uoob
    - using Virtualbox on Win, create shared folder ~/netaut/xfer, check "permanent" and "auto-mount"
    - restart uoob
    - use /media/sf_xfer at will
    - (was sudo adduser richard vboxsf necessary in there somewhere? unsure.)

- install postgres
    - sudo echo 'deb http://apt.postgresql.org/pub/repos/apt/ xenial-pgdg main' >> /etc/apt/sources.list.d/pgdg.list
    (NOTE: I HAD TO USE SUDO VIM... TO ACCOMPLISH THE FOREGOING (remember to lose the redirection part when copy/pasting.)
    – Import the repository signing key, and update the package lists
    wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
    # sudo apt-get update
    # sudo apt-get install postgresql-10
    sudo su - postgres
    createuser richard
    createdb richard

    (Unused advice, so far) {
    - You can now start the database server using:
    /usr/lib/postgresql/10/bin/pg_ctl -D /var/lib/postgresql/10/main -l logfile start
    – After installing PostgreSQL database server, by default PostgreSQL, will create a
    system account user ‘postgres’ and a user named ‘postgres’ with role ‘postgres’.
    }
    – To connect as superuser, use the following commands:
    # sudo su - postgres
    # psql 
    - usage examples and more at ref:
    http://yallalabs.com/linux/how-to-install-and-use-postgresql-10-on-ubuntu-16-04/
    - found I also ?needed sudo apt-get libpq-dev and libpq++-dev

- install libpqxx (if using Postgres from C++)
    - sudo apt-get install libpq-dev
    - sudo apt-get install xmlto (lengthy installation)
        (in one case, 'make' still complained it was missing, so I
        re-./configure'ed using --disable-documentation
    - clone libpqxx from GitHub
    - ./configure;make;make install
    - (for Makefile)
        - LIBS += lpqxx lpq (order matters!)
        - -I<include path is ~/libpqxx/include>

-install boost
    - download from https://www.boost.org/users/history/version_1_67_0.html (the .gz) to ~
    - gunzip
    - tar xvf

-install R
    - sudo apt-get install r-base
    - install tidyverse package
        - sudo apt-get install -y libxml2-dev libcurl4-openssl-dev libssl-dev
        - R> install.packages("tidyverse") /* extensive work */
        - (?might it also need libpq-dev? (I previously installed RPostgreSQL first))

- to use Postgresql "under" R:
    - sudo apt-get install libpq-dev
    - R> install.packages("RPostgreSQL")
    - (See OneNote 'NetworkAutomata' journal for session setup advice.)

- to use R from within Postgresql (32-bit Ubuntu only?): /* not required */
    - install PL/R using 32-bit deb package: 1.8.3.0.17-3.pgdg16.04+1
    - make it accessible for use in R (as supervisor only, I think):
        sudo su - postgres
        psql richard
        CREATE EXTENSION plr;
    - additional useful advice may be in: http://www.joeconway.com/plr/doc/plr-install.html (I did
        NOT, though, install from source as it details.)
    - (useful background information might be had by examining:
        /usr/share/postgresql/10/extensions/plr.sql)

- install LaTeX
    - sudo apt-get install texlive-full
    - sudo apt-get install texmaker
    - sudo apt install xpdf
----(following Ubuntu upgrade -> 18)
-   in /usr/share/ghostscript/9.25/
    (confirm that iccprofiles is an empty file, then)
    sudo su
    rm -r iccprofiles
    ln -s /usr/share/color/icc/ghostscript iccprofiles
    (I also did sudo apt install icc-profiles, not sure if it was a necessary prereq, though)
----

- install the 'exportasimages' extension to libreoffice Impress
    - search 'libreoffice exportasimages' to reach libreoffice.org site for extensions
    - download and run 'in' libreoffice

- install pip, etc.
    $ sudo apt-get install python-pip python-dev build-essential 
    $ sudo pip install --upgrade pip 
    $ sudo pip install --upgrade virtualenv 
- install scikit-learn
    - sudo pip install numpy
    - sudo pip install scipy
    - sudo pip install scikit-learn
    - sudo pip install matplotlib

(Deferred enabling doxygen)
(Deferred enabling googletest to run SNAP's tests)

- install yEd
    downloaded .sh install script, chmod +x
    (also installs a JRE in the yEd dir, which must be writable
    next time try sudo ...sh and place in /usr/bin?)

- install dia graphic editor
    - Download linux/ubuntu package from: http://dia-installer.de/download/linux.html.en
    - Activate link from browser download icon (starts UI)
    - Click 'Install' (twice, for some reason, until asked for sudo credentials)
    - Invoke from shell 'dia', then grab gnome icon and slide into place in app tray

- install inkscape
    - (had a false start with a failed install of flatpak first, aborted)
    - sudo add-apt-repository ppa:inkscape.dev/stable
    - sudo apt update
    - sudo apt install inkscape

- install leveldb
-   download from github
-   README => mkdir -p build && cd build
-   (see README for build commands)
-   manually sudo cp -r ~/leveldb/include/leveldb into /usr/local/include/
-   manually sudo cp ~/leveldb/build/libleveldb.a into /usr/local/lib/
-   use, e.g., #include <leveldb/db.h>

- install mhash library
    - downloaded mhash from sourceforge
    - gunzip, tar xvf, ./configure, make
